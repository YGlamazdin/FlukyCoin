syntax = "proto3";

service NetworkService {
  rpc RegisterPeer(PeerRequest) returns (PeerResponse);
  rpc GetPeers(PeerRequest) returns (PeerResponse);
  rpc Ping(Empty) returns (Empty); // Добавляем метод Ping
  rpc GetPeerInfo(Empty) returns (PeerInfoResponse);
  rpc BroadcastTransactionHash(TransactionHash) returns (Ack);
  rpc GetFullTransaction(TransactionHash) returns (Transaction);
  rpc AddTransaction(Transaction) returns (Ack);
  rpc GetAllTransactions(Empty) returns (TransactionList) {}
  rpc BroadcastBlock(Block) returns (Ack);
  rpc GetBlockByNumber(BlockRequest) returns (BlockResponse);
  rpc GetBlockCandidate(Empty) returns (BlockResponse);
  rpc GetAddressInfo(AddressRequest) returns (AddressInfoResponse);
  rpc GetNetInfo(Empty) returns (NetInfoResponse);
  rpc GetAllAddresses(Empty) returns (AddressList);
  rpc BroadcastBlockHash(BlockHash) returns (BlockHashResponse);  // Новый метод
}

message AddressInfo {
  string address = 1;
  string balance = 2;
}

message AddressList {
  repeated AddressInfo addresses = 1;
}

message NetInfoResponse {
  bool synced = 1;
  int32 blocks = 2;
  int64 last_block_time = 3;
  string last_block_hash = 4;
  int32 difficulty = 5;
  repeated PeerInfo peers_info = 6;
}

message PeerInfo {
  string network_info = 1;
  bool synced = 2;
  int32 blocks = 3;
  string latest_block = 4;
  float uptime = 5;
  int32 difficulty = 6;
}

message TransactionList {
  repeated Transaction transactions = 1;
}

message PeerRequest {
  string address = 1;
}

message PeerResponse {
  repeated string peers = 1;
}

message NodeInfoRequest {
}

message PeerInfoResponse {
  string version = 1;
  bool synced = 2;
  int32 blocks = 3;
  string latest_block = 4;
  string block_candidate = 5;
  float uptime = 6;
  int32 peer_count = 7;
  string network_info = 8;
  int32 pending_transactions = 9;
  int32 difficulty = 10;
}

message BlockRequest {
  int64 block_number = 1;
}

message BlockResponse {
  string block_data = 1;  // JSON-представление блока
}

message TransactionHash {
  string hash = 1;
  string from_host = 2;
}

message Transaction {
  string json_data = 1;
}

message Block {
  // Поле для хранения данных блока в виде строки JSON
  string data = 1;
}

message AddressRequest {
  string address = 1;
  int32 transactions_start = 2;
  int32 transactions_end = 3;
}

message AddressInfoResponse {
  double balance = 1;
  int32 nonce = 2;
  repeated Transaction transactions = 3;
}

message Ack {
  bool success = 1;
}

message Empty {
}

message BlockHash {
  string hash = 1;
}

message BlockHashResponse {
  bool need_block = 1;
}
